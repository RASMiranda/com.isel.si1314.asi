//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ASIVesteEntities : DbContext
    {
        public ASIVesteEntities()
            : base("name=ASIVesteEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Encomenda> Encomendas { get; set; }
        public virtual DbSet<Fornecedor> Fornecedores { get; set; }
        public virtual DbSet<Venda> Vendas { get; set; }
        public virtual DbSet<vw_verificarStock> vw_verificarStock { get; set; }
        public virtual DbSet<vProduto> vProdutos { get; set; }
    
        public virtual int sp_inserirProduto(Nullable<int> tipo, string designacao, Nullable<decimal> preco, Nullable<int> stockQtd, Nullable<int> stockMinimo, Nullable<int> fornecedorId)
        {
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(int));
    
            var designacaoParameter = designacao != null ?
                new ObjectParameter("Designacao", designacao) :
                new ObjectParameter("Designacao", typeof(string));
    
            var precoParameter = preco.HasValue ?
                new ObjectParameter("Preco", preco) :
                new ObjectParameter("Preco", typeof(decimal));
    
            var stockQtdParameter = stockQtd.HasValue ?
                new ObjectParameter("StockQtd", stockQtd) :
                new ObjectParameter("StockQtd", typeof(int));
    
            var stockMinimoParameter = stockMinimo.HasValue ?
                new ObjectParameter("StockMinimo", stockMinimo) :
                new ObjectParameter("StockMinimo", typeof(int));
    
            var fornecedorIdParameter = fornecedorId.HasValue ?
                new ObjectParameter("FornecedorId", fornecedorId) :
                new ObjectParameter("FornecedorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_inserirProduto", tipoParameter, designacaoParameter, precoParameter, stockQtdParameter, stockMinimoParameter, fornecedorIdParameter);
        }
    
        public virtual int sp_realizarEncomenda(Nullable<int> produtoId, Nullable<int> encomendaRecebida, Nullable<int> qtdEncomendada, Nullable<int> vendaId, ObjectParameter encomendaId)
        {
            var produtoIdParameter = produtoId.HasValue ?
                new ObjectParameter("ProdutoId", produtoId) :
                new ObjectParameter("ProdutoId", typeof(int));
    
            var encomendaRecebidaParameter = encomendaRecebida.HasValue ?
                new ObjectParameter("EncomendaRecebida", encomendaRecebida) :
                new ObjectParameter("EncomendaRecebida", typeof(int));
    
            var qtdEncomendadaParameter = qtdEncomendada.HasValue ?
                new ObjectParameter("QtdEncomendada", qtdEncomendada) :
                new ObjectParameter("QtdEncomendada", typeof(int));
    
            var vendaIdParameter = vendaId.HasValue ?
                new ObjectParameter("VendaId", vendaId) :
                new ObjectParameter("VendaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_realizarEncomenda", produtoIdParameter, encomendaRecebidaParameter, qtdEncomendadaParameter, vendaIdParameter, encomendaId);
        }
    
        public virtual int sp_realizarVenda(string nomeCliente, string moradaCliente, Nullable<int> produtoId, Nullable<int> qtd, ObjectParameter vendaId, ObjectParameter vendaExpedida, ObjectParameter encomendaId)
        {
            var nomeClienteParameter = nomeCliente != null ?
                new ObjectParameter("NomeCliente", nomeCliente) :
                new ObjectParameter("NomeCliente", typeof(string));
    
            var moradaClienteParameter = moradaCliente != null ?
                new ObjectParameter("MoradaCliente", moradaCliente) :
                new ObjectParameter("MoradaCliente", typeof(string));
    
            var produtoIdParameter = produtoId.HasValue ?
                new ObjectParameter("ProdutoId", produtoId) :
                new ObjectParameter("ProdutoId", typeof(int));
    
            var qtdParameter = qtd.HasValue ?
                new ObjectParameter("Qtd", qtd) :
                new ObjectParameter("Qtd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_realizarVenda", nomeClienteParameter, moradaClienteParameter, produtoIdParameter, qtdParameter, vendaId, vendaExpedida, encomendaId);
        }
    
        public virtual int sp_receberEncomenda(Nullable<int> encomendaId)
        {
            var encomendaIdParameter = encomendaId.HasValue ?
                new ObjectParameter("EncomendaId", encomendaId) :
                new ObjectParameter("EncomendaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_receberEncomenda", encomendaIdParameter);
        }
    
        public virtual int sp_removerProduto(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_removerProduto", idParameter);
        }
    
        public virtual int sp_alterarProduto(Nullable<int> id, Nullable<int> tipo, string designacao, Nullable<decimal> preco, Nullable<int> stockQtd, Nullable<int> stockMinimo, Nullable<int> fornecedorId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(int));
    
            var designacaoParameter = designacao != null ?
                new ObjectParameter("Designacao", designacao) :
                new ObjectParameter("Designacao", typeof(string));
    
            var precoParameter = preco.HasValue ?
                new ObjectParameter("Preco", preco) :
                new ObjectParameter("Preco", typeof(decimal));
    
            var stockQtdParameter = stockQtd.HasValue ?
                new ObjectParameter("StockQtd", stockQtd) :
                new ObjectParameter("StockQtd", typeof(int));
    
            var stockMinimoParameter = stockMinimo.HasValue ?
                new ObjectParameter("StockMinimo", stockMinimo) :
                new ObjectParameter("StockMinimo", typeof(int));
    
            var fornecedorIdParameter = fornecedorId.HasValue ?
                new ObjectParameter("FornecedorId", fornecedorId) :
                new ObjectParameter("FornecedorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterarProduto", idParameter, tipoParameter, designacaoParameter, precoParameter, stockQtdParameter, stockMinimoParameter, fornecedorIdParameter);
        }
    }
}
